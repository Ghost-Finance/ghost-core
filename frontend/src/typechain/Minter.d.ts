/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MinterInterface extends ethers.utils.Interface {
  functions: {
    "FLAG_TIP()": FunctionFragment;
    "PENALTY_FEE()": FunctionFragment;
    "_mintPenalty(address,address,address,uint256)": FunctionFragment;
    "_transferLiquidate(address,address,uint256)": FunctionFragment;
    "auctionDebt(address,address)": FunctionFragment;
    "auctionFinish(uint256,address,address,address,uint256,uint256)": FunctionFragment;
    "balanceOfSynth(address,address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "cRatioActive(address)": FunctionFragment;
    "cRatioPassive(address)": FunctionFragment;
    "collateralBalance(address,address)": FunctionFragment;
    "collateralFeed()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "createSynth(string,string,uint256,uint256,uint256,address)": FunctionFragment;
    "depositCollateral(address,uint256)": FunctionFragment;
    "feeds(address)": FunctionFragment;
    "flagLiquidate(address,address)": FunctionFragment;
    "getCRatio(address)": FunctionFragment;
    "getSynth(uint256)": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "maximumByCollateral(address,uint256)": FunctionFragment;
    "maximumByDebt(address,uint256)": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "plrDelay(address,address)": FunctionFragment;
    "ratio()": FunctionFragment;
    "settleDebt(address,address,uint256)": FunctionFragment;
    "simulateCRatio(address,uint256,uint256)": FunctionFragment;
    "synthDebt(address,address)": FunctionFragment;
    "synths(uint256)": FunctionFragment;
    "updateSynthCRatio(address,uint256,uint256)": FunctionFragment;
    "withdrawnCollateral(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FLAG_TIP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PENALTY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_mintPenalty",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_transferLiquidate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionDebt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionFinish",
    values: [BigNumberish, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfSynth",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cRatioActive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cRatioPassive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSynth",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "flagLiquidate",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getCRatio", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSynth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumByCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumByDebt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "plrDelay",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "ratio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settleDebt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateCRatio",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "synthDebt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "synths",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSynthCRatio",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnCollateral",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FLAG_TIP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_mintPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transferLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cRatioActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cRatioPassive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flagLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSynth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumByCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumByDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plrDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ratio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "simulateCRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synthDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "synths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSynthCRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnCollateral",
    data: BytesLike
  ): Result;

  events: {
    "AccountFlaggedForLiquidation(address,address,uint256)": EventFragment;
    "AuctionFinish(uint256,address,uint256)": EventFragment;
    "Burn(address,address,uint256)": EventFragment;
    "CreateSynth(address,string,string,address)": EventFragment;
    "DepositedCollateral(address,address,uint256)": EventFragment;
    "Liquidate(address,address,address)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "WithdrawnCollateral(address,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AccountFlaggedForLiquidation"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionFinish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSynth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnCollateral"): EventFragment;
}

export class Minter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MinterInterface;

  functions: {
    FLAG_TIP(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "FLAG_TIP()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    PENALTY_FEE(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "PENALTY_FEE()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    _mintPenalty(
      token: string,
      user: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_mintPenalty(address,address,address,uint256)"(
      token: string,
      user: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _transferLiquidate(
      token: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_transferLiquidate(address,address,uint256)"(
      token: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auctionDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "auctionDebt(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    auctionFinish(
      auctionId: BigNumberish,
      user: string,
      collateralToken: string,
      synthToken: string,
      collateralAmount: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "auctionFinish(uint256,address,address,address,uint256,uint256)"(
      auctionId: BigNumberish,
      user: string,
      collateralToken: string,
      synthToken: string,
      collateralAmount: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOfSynth(
      from: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfSynth(address,address)"(
      from: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burn(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cRatioActive(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "cRatioActive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cRatioPassive(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "cRatioPassive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    collateralBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "collateralBalance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    collateralFeed(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "collateralFeed()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    collateralToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "collateralToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    createSynth(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      cRatioActive_: BigNumberish,
      cRatioPassive_: BigNumberish,
      feed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createSynth(string,string,uint256,uint256,uint256,address)"(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      cRatioActive_: BigNumberish,
      cRatioPassive_: BigNumberish,
      feed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "feeds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    flagLiquidate(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flagLiquidate(address,address)"(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCRatio(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getCRatio(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSynth(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getSynth(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    liquidate(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(address,address)"(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maximumByCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maximumByCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maximumByDebt(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maximumByDebt(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mint(
      token: string,
      amountToDeposit: BigNumberish,
      amountToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256)"(
      token: string,
      amountToDeposit: BigNumberish,
      amountToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    plrDelay(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "plrDelay(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ratio(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ratio()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    settleDebt(
      user: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleDebt(address,address,uint256)"(
      user: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    simulateCRatio(
      token: string,
      amountGHO: BigNumberish,
      amountGDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "simulateCRatio(address,uint256,uint256)"(
      token: string,
      amountGHO: BigNumberish,
      amountGDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    synthDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "synthDebt(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    synths(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "synths(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updateSynthCRatio(
      token: string,
      cRatio_: BigNumberish,
      cRatioPassivo_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSynthCRatio(address,uint256,uint256)"(
      token: string,
      cRatio_: BigNumberish,
      cRatioPassivo_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawnCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawnCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FLAG_TIP(overrides?: CallOverrides): Promise<BigNumber>;

  "FLAG_TIP()"(overrides?: CallOverrides): Promise<BigNumber>;

  PENALTY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "PENALTY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  _mintPenalty(
    token: string,
    user: string,
    keeper: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_mintPenalty(address,address,address,uint256)"(
    token: string,
    user: string,
    keeper: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _transferLiquidate(
    token: string,
    keeper: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_transferLiquidate(address,address,uint256)"(
    token: string,
    keeper: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auctionDebt(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "auctionDebt(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionFinish(
    auctionId: BigNumberish,
    user: string,
    collateralToken: string,
    synthToken: string,
    collateralAmount: BigNumberish,
    synthAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "auctionFinish(uint256,address,address,address,uint256,uint256)"(
    auctionId: BigNumberish,
    user: string,
    collateralToken: string,
    synthToken: string,
    collateralAmount: BigNumberish,
    synthAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOfSynth(
    from: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfSynth(address,address)"(
    from: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cRatioActive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "cRatioActive(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cRatioPassive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "cRatioPassive(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collateralBalance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralFeed(overrides?: CallOverrides): Promise<string>;

  "collateralFeed()"(overrides?: CallOverrides): Promise<string>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  "collateralToken()"(overrides?: CallOverrides): Promise<string>;

  createSynth(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    cRatioActive_: BigNumberish,
    cRatioPassive_: BigNumberish,
    feed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createSynth(string,string,uint256,uint256,uint256,address)"(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    cRatioActive_: BigNumberish,
    cRatioPassive_: BigNumberish,
    feed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositCollateral(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositCollateral(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeds(arg0: string, overrides?: CallOverrides): Promise<string>;

  "feeds(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  flagLiquidate(
    user: string,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flagLiquidate(address,address)"(
    user: string,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCRatio(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getCRatio(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSynth(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getSynth(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  liquidate(
    user: string,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(address,address)"(
    user: string,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maximumByCollateral(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maximumByCollateral(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maximumByDebt(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maximumByDebt(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    token: string,
    amountToDeposit: BigNumberish,
    amountToMint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256)"(
    token: string,
    amountToDeposit: BigNumberish,
    amountToMint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  plrDelay(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "plrDelay(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ratio(overrides?: CallOverrides): Promise<BigNumber>;

  "ratio()"(overrides?: CallOverrides): Promise<BigNumber>;

  settleDebt(
    user: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleDebt(address,address,uint256)"(
    user: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  simulateCRatio(
    token: string,
    amountGHO: BigNumberish,
    amountGDAI: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "simulateCRatio(address,uint256,uint256)"(
    token: string,
    amountGHO: BigNumberish,
    amountGDAI: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  synthDebt(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "synthDebt(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  synths(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "synths(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateSynthCRatio(
    token: string,
    cRatio_: BigNumberish,
    cRatioPassivo_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSynthCRatio(address,uint256,uint256)"(
    token: string,
    cRatio_: BigNumberish,
    cRatioPassivo_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawnCollateral(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawnCollateral(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FLAG_TIP(overrides?: CallOverrides): Promise<BigNumber>;

    "FLAG_TIP()"(overrides?: CallOverrides): Promise<BigNumber>;

    PENALTY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "PENALTY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _mintPenalty(
      token: string,
      user: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_mintPenalty(address,address,address,uint256)"(
      token: string,
      user: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _transferLiquidate(
      token: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_transferLiquidate(address,address,uint256)"(
      token: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionDebt(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionFinish(
      auctionId: BigNumberish,
      user: string,
      collateralToken: string,
      synthToken: string,
      collateralAmount: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "auctionFinish(uint256,address,address,address,uint256,uint256)"(
      auctionId: BigNumberish,
      user: string,
      collateralToken: string,
      synthToken: string,
      collateralAmount: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfSynth(
      from: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfSynth(address,address)"(
      from: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cRatioActive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "cRatioActive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cRatioPassive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "cRatioPassive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralBalance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralFeed(overrides?: CallOverrides): Promise<string>;

    "collateralFeed()"(overrides?: CallOverrides): Promise<string>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    "collateralToken()"(overrides?: CallOverrides): Promise<string>;

    createSynth(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      cRatioActive_: BigNumberish,
      cRatioPassive_: BigNumberish,
      feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createSynth(string,string,uint256,uint256,uint256,address)"(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      cRatioActive_: BigNumberish,
      cRatioPassive_: BigNumberish,
      feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeds(arg0: string, overrides?: CallOverrides): Promise<string>;

    "feeds(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    flagLiquidate(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "flagLiquidate(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCRatio(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getCRatio(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynth(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getSynth(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    liquidate(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidate(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maximumByCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maximumByCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maximumByDebt(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maximumByDebt(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      token: string,
      amountToDeposit: BigNumberish,
      amountToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,uint256)"(
      token: string,
      amountToDeposit: BigNumberish,
      amountToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    plrDelay(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "plrDelay(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratio(overrides?: CallOverrides): Promise<BigNumber>;

    "ratio()"(overrides?: CallOverrides): Promise<BigNumber>;

    settleDebt(
      user: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleDebt(address,address,uint256)"(
      user: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateCRatio(
      token: string,
      amountGHO: BigNumberish,
      amountGDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "simulateCRatio(address,uint256,uint256)"(
      token: string,
      amountGHO: BigNumberish,
      amountGDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "synthDebt(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synths(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "synths(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateSynthCRatio(
      token: string,
      cRatio_: BigNumberish,
      cRatioPassivo_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSynthCRatio(address,uint256,uint256)"(
      token: string,
      cRatio_: BigNumberish,
      cRatioPassivo_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawnCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawnCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccountFlaggedForLiquidation(
      account: string | null,
      keeper: string | null,
      deadline: null
    ): EventFilter;

    AuctionFinish(
      id: BigNumberish | null,
      user: null,
      finished_at: null
    ): EventFilter;

    Burn(account: string | null, token: null, amount: null): EventFilter;

    CreateSynth(token: null, name: null, symbol: null, feed: null): EventFilter;

    DepositedCollateral(
      account: string | null,
      token: null,
      amount: null
    ): EventFilter;

    Liquidate(
      accountLiquidated: string | null,
      accountFrom: string | null,
      token: null
    ): EventFilter;

    Mint(account: string | null, totalAmount: null): EventFilter;

    WithdrawnCollateral(
      account: string | null,
      token: null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    FLAG_TIP(overrides?: CallOverrides): Promise<BigNumber>;

    "FLAG_TIP()"(overrides?: CallOverrides): Promise<BigNumber>;

    PENALTY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "PENALTY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _mintPenalty(
      token: string,
      user: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_mintPenalty(address,address,address,uint256)"(
      token: string,
      user: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _transferLiquidate(
      token: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_transferLiquidate(address,address,uint256)"(
      token: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auctionDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionDebt(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionFinish(
      auctionId: BigNumberish,
      user: string,
      collateralToken: string,
      synthToken: string,
      collateralAmount: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "auctionFinish(uint256,address,address,address,uint256,uint256)"(
      auctionId: BigNumberish,
      user: string,
      collateralToken: string,
      synthToken: string,
      collateralAmount: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOfSynth(
      from: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfSynth(address,address)"(
      from: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cRatioActive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "cRatioActive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cRatioPassive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "cRatioPassive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralBalance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    createSynth(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      cRatioActive_: BigNumberish,
      cRatioPassive_: BigNumberish,
      feed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createSynth(string,string,uint256,uint256,uint256,address)"(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      cRatioActive_: BigNumberish,
      cRatioPassive_: BigNumberish,
      feed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "feeds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flagLiquidate(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flagLiquidate(address,address)"(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCRatio(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getCRatio(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynth(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSynth(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidate(address,address)"(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maximumByCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maximumByCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maximumByDebt(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maximumByDebt(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      token: string,
      amountToDeposit: BigNumberish,
      amountToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256)"(
      token: string,
      amountToDeposit: BigNumberish,
      amountToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    plrDelay(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "plrDelay(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratio(overrides?: CallOverrides): Promise<BigNumber>;

    "ratio()"(overrides?: CallOverrides): Promise<BigNumber>;

    settleDebt(
      user: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleDebt(address,address,uint256)"(
      user: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    simulateCRatio(
      token: string,
      amountGHO: BigNumberish,
      amountGDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "simulateCRatio(address,uint256,uint256)"(
      token: string,
      amountGHO: BigNumberish,
      amountGDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "synthDebt(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synths(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "synths(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSynthCRatio(
      token: string,
      cRatio_: BigNumberish,
      cRatioPassivo_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSynthCRatio(address,uint256,uint256)"(
      token: string,
      cRatio_: BigNumberish,
      cRatioPassivo_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawnCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawnCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FLAG_TIP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FLAG_TIP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PENALTY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PENALTY_FEE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _mintPenalty(
      token: string,
      user: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_mintPenalty(address,address,address,uint256)"(
      token: string,
      user: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _transferLiquidate(
      token: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_transferLiquidate(address,address,uint256)"(
      token: string,
      keeper: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auctionDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionDebt(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionFinish(
      auctionId: BigNumberish,
      user: string,
      collateralToken: string,
      synthToken: string,
      collateralAmount: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "auctionFinish(uint256,address,address,address,uint256,uint256)"(
      auctionId: BigNumberish,
      user: string,
      collateralToken: string,
      synthToken: string,
      collateralAmount: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOfSynth(
      from: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfSynth(address,address)"(
      from: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cRatioActive(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cRatioActive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cRatioPassive(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cRatioPassive(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralBalance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralFeed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSynth(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      cRatioActive_: BigNumberish,
      cRatioPassive_: BigNumberish,
      feed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createSynth(string,string,uint256,uint256,uint256,address)"(
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      cRatioActive_: BigNumberish,
      cRatioPassive_: BigNumberish,
      feed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flagLiquidate(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flagLiquidate(address,address)"(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCRatio(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCRatio(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSynth(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSynth(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address)"(
      user: string,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maximumByCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maximumByCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumByDebt(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maximumByDebt(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      token: string,
      amountToDeposit: BigNumberish,
      amountToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,uint256)"(
      token: string,
      amountToDeposit: BigNumberish,
      amountToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plrDelay(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "plrDelay(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ratio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settleDebt(
      user: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleDebt(address,address,uint256)"(
      user: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    simulateCRatio(
      token: string,
      amountGHO: BigNumberish,
      amountGDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "simulateCRatio(address,uint256,uint256)"(
      token: string,
      amountGHO: BigNumberish,
      amountGDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synthDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "synthDebt(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synths(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "synths(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSynthCRatio(
      token: string,
      cRatio_: BigNumberish,
      cRatioPassivo_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSynthCRatio(address,uint256,uint256)"(
      token: string,
      cRatio_: BigNumberish,
      cRatioPassivo_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawnCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawnCollateral(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
