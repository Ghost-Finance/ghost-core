/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AuctionHouseInterface extends ethers.utils.Interface {
  functions: {
    "auctionFinishCallback(uint256,address,address,address,address,uint256,uint256)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "calculateAmountToFixCollateral(uint256,uint256)": FunctionFragment;
    "getAuction(uint256)": FunctionFragment;
    "price(uint256,uint256)": FunctionFragment;
    "radiv(uint256,uint256)": FunctionFragment;
    "start(address,address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "take(uint256,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctionFinishCallback",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAmountToFixCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "radiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionFinishCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAmountToFixCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "radiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;

  events: {
    "Start(address,address,uint256,uint256,uint256)": EventFragment;
    "Take(uint256,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Take"): EventFragment;
}

export class AuctionHouse extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AuctionHouseInterface;

  functions: {
    auctionFinishCallback(
      id: BigNumberish,
      minter: string,
      user: string,
      tokenCollateral: string,
      synthToken: string,
      collateralBalance: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "auctionFinishCallback(uint256,address,address,address,address,uint256,uint256)"(
      id: BigNumberish,
      minter: string,
      user: string,
      tokenCollateral: string,
      synthToken: string,
      collateralBalance: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      user: string;
      tokenAddress: string;
      collateralTokenAddress: string;
      keeperAddress: string;
      collateralBalance: BigNumber;
      collateralValue: BigNumber;
      synthAmount: BigNumber;
      auctionTarget: BigNumber;
      initialFeedPrice: BigNumber;
      minterAddress: string;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: string;
      10: BigNumber;
      11: BigNumber;
    }>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      user: string;
      tokenAddress: string;
      collateralTokenAddress: string;
      keeperAddress: string;
      collateralBalance: BigNumber;
      collateralValue: BigNumber;
      synthAmount: BigNumber;
      auctionTarget: BigNumber;
      initialFeedPrice: BigNumber;
      minterAddress: string;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: string;
      10: BigNumber;
      11: BigNumber;
    }>;

    calculateAmountToFixCollateral(
      debtBalance: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculateAmountToFixCollateral(uint256,uint256)"(
      debtBalance: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        user: string;
        tokenAddress: string;
        collateralTokenAddress: string;
        keeperAddress: string;
        collateralBalance: BigNumber;
        collateralValue: BigNumber;
        synthAmount: BigNumber;
        auctionTarget: BigNumber;
        initialFeedPrice: BigNumber;
        minterAddress: string;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: string;
        10: BigNumber;
        11: BigNumber;
      };
    }>;

    "getAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        user: string;
        tokenAddress: string;
        collateralTokenAddress: string;
        keeperAddress: string;
        collateralBalance: BigNumber;
        collateralValue: BigNumber;
        synthAmount: BigNumber;
        auctionTarget: BigNumber;
        initialFeedPrice: BigNumber;
        minterAddress: string;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: string;
        10: BigNumber;
        11: BigNumber;
      };
    }>;

    price(
      initialPrice: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "price(uint256,uint256)"(
      initialPrice: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    radiv(
      dividend: BigNumberish,
      divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "radiv(uint256,uint256)"(
      dividend: BigNumberish,
      divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    start(
      user_: string,
      tokenAddress_: string,
      collateralTokenAddress_: string,
      keeperAddress_: string,
      collateralBalance_: BigNumberish,
      collateralValue_: BigNumberish,
      auctionTarget_: BigNumberish,
      initialFeedPrice_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "start(address,address,address,address,uint256,uint256,uint256,uint256)"(
      user_: string,
      tokenAddress_: string,
      collateralTokenAddress_: string,
      keeperAddress_: string,
      collateralBalance_: BigNumberish,
      collateralValue_: BigNumberish,
      auctionTarget_: BigNumberish,
      initialFeedPrice_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    take(
      auctionId: BigNumberish,
      amount: BigNumberish,
      maxCollateralPrice: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "take(uint256,uint256,uint256,address)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      maxCollateralPrice: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  auctionFinishCallback(
    id: BigNumberish,
    minter: string,
    user: string,
    tokenCollateral: string,
    synthToken: string,
    collateralBalance: BigNumberish,
    synthAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "auctionFinishCallback(uint256,address,address,address,address,uint256,uint256)"(
    id: BigNumberish,
    minter: string,
    user: string,
    tokenCollateral: string,
    synthToken: string,
    collateralBalance: BigNumberish,
    synthAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    user: string;
    tokenAddress: string;
    collateralTokenAddress: string;
    keeperAddress: string;
    collateralBalance: BigNumber;
    collateralValue: BigNumber;
    synthAmount: BigNumber;
    auctionTarget: BigNumber;
    initialFeedPrice: BigNumber;
    minterAddress: string;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: string;
    10: BigNumber;
    11: BigNumber;
  }>;

  "auctions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    user: string;
    tokenAddress: string;
    collateralTokenAddress: string;
    keeperAddress: string;
    collateralBalance: BigNumber;
    collateralValue: BigNumber;
    synthAmount: BigNumber;
    auctionTarget: BigNumber;
    initialFeedPrice: BigNumber;
    minterAddress: string;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: string;
    10: BigNumber;
    11: BigNumber;
  }>;

  calculateAmountToFixCollateral(
    debtBalance: BigNumberish,
    collateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateAmountToFixCollateral(uint256,uint256)"(
    debtBalance: BigNumberish,
    collateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuction(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    user: string;
    tokenAddress: string;
    collateralTokenAddress: string;
    keeperAddress: string;
    collateralBalance: BigNumber;
    collateralValue: BigNumber;
    synthAmount: BigNumber;
    auctionTarget: BigNumber;
    initialFeedPrice: BigNumber;
    minterAddress: string;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: string;
    10: BigNumber;
    11: BigNumber;
  }>;

  "getAuction(uint256)"(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    user: string;
    tokenAddress: string;
    collateralTokenAddress: string;
    keeperAddress: string;
    collateralBalance: BigNumber;
    collateralValue: BigNumber;
    synthAmount: BigNumber;
    auctionTarget: BigNumber;
    initialFeedPrice: BigNumber;
    minterAddress: string;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: string;
    10: BigNumber;
    11: BigNumber;
  }>;

  price(
    initialPrice: BigNumberish,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "price(uint256,uint256)"(
    initialPrice: BigNumberish,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  radiv(
    dividend: BigNumberish,
    divisor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "radiv(uint256,uint256)"(
    dividend: BigNumberish,
    divisor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  start(
    user_: string,
    tokenAddress_: string,
    collateralTokenAddress_: string,
    keeperAddress_: string,
    collateralBalance_: BigNumberish,
    collateralValue_: BigNumberish,
    auctionTarget_: BigNumberish,
    initialFeedPrice_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "start(address,address,address,address,uint256,uint256,uint256,uint256)"(
    user_: string,
    tokenAddress_: string,
    collateralTokenAddress_: string,
    keeperAddress_: string,
    collateralBalance_: BigNumberish,
    collateralValue_: BigNumberish,
    auctionTarget_: BigNumberish,
    initialFeedPrice_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  take(
    auctionId: BigNumberish,
    amount: BigNumberish,
    maxCollateralPrice: BigNumberish,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "take(uint256,uint256,uint256,address)"(
    auctionId: BigNumberish,
    amount: BigNumberish,
    maxCollateralPrice: BigNumberish,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionFinishCallback(
      id: BigNumberish,
      minter: string,
      user: string,
      tokenCollateral: string,
      synthToken: string,
      collateralBalance: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "auctionFinishCallback(uint256,address,address,address,address,uint256,uint256)"(
      id: BigNumberish,
      minter: string,
      user: string,
      tokenCollateral: string,
      synthToken: string,
      collateralBalance: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      user: string;
      tokenAddress: string;
      collateralTokenAddress: string;
      keeperAddress: string;
      collateralBalance: BigNumber;
      collateralValue: BigNumber;
      synthAmount: BigNumber;
      auctionTarget: BigNumber;
      initialFeedPrice: BigNumber;
      minterAddress: string;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: string;
      10: BigNumber;
      11: BigNumber;
    }>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      user: string;
      tokenAddress: string;
      collateralTokenAddress: string;
      keeperAddress: string;
      collateralBalance: BigNumber;
      collateralValue: BigNumber;
      synthAmount: BigNumber;
      auctionTarget: BigNumber;
      initialFeedPrice: BigNumber;
      minterAddress: string;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: string;
      10: BigNumber;
      11: BigNumber;
    }>;

    calculateAmountToFixCollateral(
      debtBalance: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAmountToFixCollateral(uint256,uint256)"(
      debtBalance: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      user: string;
      tokenAddress: string;
      collateralTokenAddress: string;
      keeperAddress: string;
      collateralBalance: BigNumber;
      collateralValue: BigNumber;
      synthAmount: BigNumber;
      auctionTarget: BigNumber;
      initialFeedPrice: BigNumber;
      minterAddress: string;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: string;
      10: BigNumber;
      11: BigNumber;
    }>;

    "getAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      user: string;
      tokenAddress: string;
      collateralTokenAddress: string;
      keeperAddress: string;
      collateralBalance: BigNumber;
      collateralValue: BigNumber;
      synthAmount: BigNumber;
      auctionTarget: BigNumber;
      initialFeedPrice: BigNumber;
      minterAddress: string;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: string;
      10: BigNumber;
      11: BigNumber;
    }>;

    price(
      initialPrice: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "price(uint256,uint256)"(
      initialPrice: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    radiv(
      dividend: BigNumberish,
      divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "radiv(uint256,uint256)"(
      dividend: BigNumberish,
      divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start(
      user_: string,
      tokenAddress_: string,
      collateralTokenAddress_: string,
      keeperAddress_: string,
      collateralBalance_: BigNumberish,
      collateralValue_: BigNumberish,
      auctionTarget_: BigNumberish,
      initialFeedPrice_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "start(address,address,address,address,uint256,uint256,uint256,uint256)"(
      user_: string,
      tokenAddress_: string,
      collateralTokenAddress_: string,
      keeperAddress_: string,
      collateralBalance_: BigNumberish,
      collateralValue_: BigNumberish,
      auctionTarget_: BigNumberish,
      initialFeedPrice_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    take(
      auctionId: BigNumberish,
      amount: BigNumberish,
      maxCollateralPrice: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "take(uint256,uint256,uint256,address)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      maxCollateralPrice: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Start(
      cdp: string | null,
      keeper: string | null,
      amount: null,
      start: null,
      end: null
    ): EventFilter;

    Take(
      id: BigNumberish | null,
      keeper: string | null,
      to: string | null,
      amount: null,
      price: null,
      end: null
    ): EventFilter;
  };

  estimateGas: {
    auctionFinishCallback(
      id: BigNumberish,
      minter: string,
      user: string,
      tokenCollateral: string,
      synthToken: string,
      collateralBalance: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "auctionFinishCallback(uint256,address,address,address,address,uint256,uint256)"(
      id: BigNumberish,
      minter: string,
      user: string,
      tokenCollateral: string,
      synthToken: string,
      collateralBalance: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateAmountToFixCollateral(
      debtBalance: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAmountToFixCollateral(uint256,uint256)"(
      debtBalance: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(
      initialPrice: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "price(uint256,uint256)"(
      initialPrice: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    radiv(
      dividend: BigNumberish,
      divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "radiv(uint256,uint256)"(
      dividend: BigNumberish,
      divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start(
      user_: string,
      tokenAddress_: string,
      collateralTokenAddress_: string,
      keeperAddress_: string,
      collateralBalance_: BigNumberish,
      collateralValue_: BigNumberish,
      auctionTarget_: BigNumberish,
      initialFeedPrice_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "start(address,address,address,address,uint256,uint256,uint256,uint256)"(
      user_: string,
      tokenAddress_: string,
      collateralTokenAddress_: string,
      keeperAddress_: string,
      collateralBalance_: BigNumberish,
      collateralValue_: BigNumberish,
      auctionTarget_: BigNumberish,
      initialFeedPrice_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    take(
      auctionId: BigNumberish,
      amount: BigNumberish,
      maxCollateralPrice: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "take(uint256,uint256,uint256,address)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      maxCollateralPrice: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionFinishCallback(
      id: BigNumberish,
      minter: string,
      user: string,
      tokenCollateral: string,
      synthToken: string,
      collateralBalance: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "auctionFinishCallback(uint256,address,address,address,address,uint256,uint256)"(
      id: BigNumberish,
      minter: string,
      user: string,
      tokenCollateral: string,
      synthToken: string,
      collateralBalance: BigNumberish,
      synthAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateAmountToFixCollateral(
      debtBalance: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAmountToFixCollateral(uint256,uint256)"(
      debtBalance: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(
      initialPrice: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "price(uint256,uint256)"(
      initialPrice: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    radiv(
      dividend: BigNumberish,
      divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "radiv(uint256,uint256)"(
      dividend: BigNumberish,
      divisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    start(
      user_: string,
      tokenAddress_: string,
      collateralTokenAddress_: string,
      keeperAddress_: string,
      collateralBalance_: BigNumberish,
      collateralValue_: BigNumberish,
      auctionTarget_: BigNumberish,
      initialFeedPrice_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "start(address,address,address,address,uint256,uint256,uint256,uint256)"(
      user_: string,
      tokenAddress_: string,
      collateralTokenAddress_: string,
      keeperAddress_: string,
      collateralBalance_: BigNumberish,
      collateralValue_: BigNumberish,
      auctionTarget_: BigNumberish,
      initialFeedPrice_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    take(
      auctionId: BigNumberish,
      amount: BigNumberish,
      maxCollateralPrice: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "take(uint256,uint256,uint256,address)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      maxCollateralPrice: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
