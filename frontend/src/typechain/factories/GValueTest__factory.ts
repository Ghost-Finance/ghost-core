/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { GValueTest } from "../GValueTest";

export class GValueTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<GValueTest> {
    return super.deploy(overrides || {}) as Promise<GValueTest>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GValueTest {
    return super.attach(address) as GValueTest;
  }
  connect(signer: Signer): GValueTest__factory {
    return super.connect(signer) as GValueTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GValueTest {
    return new Contract(address, _abi, signerOrProvider) as GValueTest;
  }
}

const _abi = [
  {
    inputs: [],
    name: "peek",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wut",
        type: "uint256",
      },
    ],
    name: "poke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "read",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "void",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610195806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806332145f901461005157806357de26a41461006657806359e02dd714610084578063ac4c25b21461009a575b600080fd5b61006461005f36600461010d565b6100a2565b005b61006e6100b6565b60405161007b9190610146565b60405180910390f35b61008c6100f4565b60405161007b92919061014f565b610064610101565b60019081556000805460ff19169091179055565b60008060006100c36100f4565b9092509050806100ee5760405162461bcd60e51b81526004016100e590610125565b60405180910390fd5b50905090565b60015460005460ff169091565b6000805460ff19169055565b60006020828403121561011e578081fd5b5035919050565b6020808252600790820152661a185e8b5b9bdd60ca1b604082015260600190565b90815260200190565b918252151560208201526040019056fea2646970667358221220afa723385097fd0a25c6b7bfe95274ca9a54cd6e5c8e5bd92b7d883c4a324ae364736f6c63430008000033";
