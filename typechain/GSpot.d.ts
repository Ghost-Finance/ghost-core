/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GSpotInterface extends ethers.utils.Interface {
  functions: {
    "addSsm(bytes32,address)": FunctionFragment;
    "oracles(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "peek(bytes32)": FunctionFragment;
    "read(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSsm",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "oracles", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "peek", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "read", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addSsm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class GSpot extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GSpotInterface;

  functions: {
    addSsm(
      synth: BytesLike,
      spot_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSsm(bytes32,address)"(
      synth: BytesLike,
      spot_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    oracles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "oracles(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    peek(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "peek(bytes32)"(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    read(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "read(bytes32)"(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addSsm(
    synth: BytesLike,
    spot_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSsm(bytes32,address)"(
    synth: BytesLike,
    spot_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  oracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "oracles(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  peek(
    synthKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  "peek(bytes32)"(
    synthKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  read(synthKey: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "read(bytes32)"(
    synthKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addSsm(
      synth: BytesLike,
      spot_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSsm(bytes32,address)"(
      synth: BytesLike,
      spot_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    oracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "oracles(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    peek(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "peek(bytes32)"(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    read(synthKey: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "read(bytes32)"(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addSsm(
      synth: BytesLike,
      spot_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addSsm(bytes32,address)"(
      synth: BytesLike,
      spot_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    oracles(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "oracles(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    peek(synthKey: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "peek(bytes32)"(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    read(synthKey: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "read(bytes32)"(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSsm(
      synth: BytesLike,
      spot_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSsm(bytes32,address)"(
      synth: BytesLike,
      spot_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oracles(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peek(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "peek(bytes32)"(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    read(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "read(bytes32)"(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
